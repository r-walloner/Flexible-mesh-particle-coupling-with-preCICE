units si
atom_style granular
newton off
# TODO configure neighbors
neigh_modify delay 0

timestep 0.0001

# Define domain
processors * * 1
boundary f f f
region domain block 0 0.004 0 0.004 0 0.006
create_box 1 domain

# TODO use propper interaction model
fix bottom all wall/gran &
  model hooke tangential history &
  primitive type 1 zplane 0

# Define particles
# TODO calculate latice spacing based on initial porosity
region insert block 0 0.004 0 0.004 0.003 0.006
lattice sc 0.00045
create_atoms 1 region insert all_in 0.0000000001
set group all diameter 0.0004
set group all density 2500
# TODO user propper interaction model
fix m1 all property/global youngsModulus peratomtype 5.e6
fix m2 all property/global poissonsRatio peratomtype 0.45
fix m3 all property/global coefficientRestitution peratomtypepair 1 0.9
fix m4 all property/global coefficientFriction peratomtypepair 1 0.05
fix m5 all property/global characteristicVelocity scalar 2.

# Define interaction model
communicate single vel yes
pair_style gran model hooke tangential history #Hooke without cohesion
pair_coeff	* *

# Define dynamics
fix integr all nve/sphere

fix gravity all gravity 9.81 vector 0 0 -1

precice_initialize Particle ../precice-config.xml Fluid-Mesh
compute v_fluid all precice_read/atom Fluid-Mesh Fluid-Velocity 1
compute p_grad_fluid all precice_read/atom Fluid-Mesh Fluid-Pressure-Gradient 1

# Particle volume
variable vol atom "4/3 * PI * r^3"

# Boyancy force
variable f_buoyancy_x atom "-v_vol * c_p_grad_fluid[1]"
variable f_buoyancy_y atom "-v_vol * c_p_grad_fluid[2]"
variable f_buoyancy_z atom "-v_vol * c_p_grad_fluid[3]"

# Particle volume fraction
compute voronoi_tess all voronoi/atom
variable vol_frac atom "v_vol / c_voronoi_tess[1]"

# Drag force
variable mu_fluid equal "0.89" # TODO Is the unit right?
variable rho_fluid equal "1000" # TODO Is the unit right?

variable re_fluid atom &
  "(1-v_vol_frac) * v_rho_fluid * sqrt((c_v_fluid[1] - vx)^2 + (c_v_fluid[2] - vy)^2 + (c_v_fluid[3] - vz)^2) * 2 * r / v_mu_fluid"

variable drag_c atom &
  "(v_re_fluid < 1000) * (24/v_re_fluid * (1 + 0.15 * v_re_fluid^0.687)) + (v_re_fluid >= 1000) * (0.44)"

variable drag_beta atom &
  "(1-v_vol_frac < 0.8) * (150 * (v_vol_frac^2 * v_mu_fluid) / ((1-v_vol_frac) * (2*r)^2) + 1.75 * (v_vol_frac * v_rho_fluid) / (2 * r) * sqrt((c_v_fluid[1] - vx)^2 + (c_v_fluid[2] - vy)^2 + (c_v_fluid[3] - vz)^2)) + (1-v_vol_frac >= 0.8) * (3/2 * v_drag_c * ((1-v_vol_frac) * v_vol_frac^2 * v_rho_fluid) / (2*r) * sqrt((c_v_fluid[1] - vx)^2 + (c_v_fluid[2] - vy)^2 + (c_v_fluid[3] - vz)^2) * (1 - v_vol_frac)^(-2.65))"

variable f_drag_x atom &
  "(v_drag_beta * v_vol) / v_vol_frac * (c_v_fluid[1] - vx)"
variable f_drag_y atom &
  "(v_drag_beta * v_vol) / v_vol_frac * (c_v_fluid[2] - vy)"
variable f_drag_z atom &
  "(v_drag_beta * v_vol) / v_vol_frac * (c_v_fluid[3] - vz)"

# TODOO implement coupling physics

dump dmp all custom/vtk 10 post/rti_*.vtk &
  id type &
  radius v_vol v_vol_frac &
  x y z &
  ix iy iz &
  vx vy vz &
  fx fy fz &
  omegax omegay omegaz &
  c_v_fluid[1] c_v_fluid[2] c_v_fluid[3] &
  c_p_grad_fluid[1] c_p_grad_fluid[2] c_p_grad_fluid[3] &
  v_f_buoyancy_x v_f_buoyancy_y v_f_buoyancy_z &
  v_f_drag_x v_f_drag_y v_f_drag_z &

run 1000 upto pre no post no every 1 precice_advance

precice_finalize
